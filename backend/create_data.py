import json
import os
import django
import logging
from django.conf import settings

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "foodgram.settings")
django.setup()

from users.models import User
from recipes.models import Recipe, Component, RecipeComponent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler(os.path.join(settings.BASE_DIR, "init.log")),
        logging.StreamHandler(),
    ],
)

# ---- –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –ü–†–û–î–£–ö–¢–û–í ----


def load_components():
    file_path = os.path.join(settings.BASE_DIR, "ingredients.json")

    if not os.path.exists(file_path):
        logging.error("‚ùå –§–∞–π–ª ingredients.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        return

    with open(file_path, encoding="utf-8") as f:
        data = json.load(f)

    existing_components = set(Component.objects.values_list("title", flat=True))

    new_components = [
        Component(title=item["name"], measurement=item["unit"])
        for item in data
        if item.get("name")
        and item.get("unit")
        and item["name"] not in existing_components
    ]

    Component.objects.bulk_create(new_components)
    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(new_components)} –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤!")


# ---- –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ----


def create_users():
    if not User.objects.filter(username="admin").exists():
        User.objects.create_superuser("admin", "admin@example.com", "admin", first_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", last_name="–§—É–¥–≥—Ä–∞–º")
        logging.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω!")
    else:
        logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    user = None
    if not User.objects.filter(username="user").exists():
        user = User.objects.create_user("user", "user@example.com", "user", first_name="–ü–µ—Ç—è", last_name="–ò–≤–∞–Ω–æ–≤")
        logging.info("‚úÖ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!")
    else:
        user = User.objects.get(username="user")
        logging.info("–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    return user


# ---- –°–û–ó–î–ê–ù–ò–ï –ë–õ–Æ–î ----


def create_dishes(user):
    dishes_data = [
        {
            "name": "–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å —Å—ã—Ä–æ–º –∏ –∫–æ–ª–±–∞—Å–æ–π",
            "details": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±—É—Ç–µ—Ä–±—Ä–æ–¥ —Å —Å—ã—Ä–æ–º, –∫–æ–ª–±–∞—Å–æ–π –∏ —Å–≤–µ–∂–∏–º–∏ –æ–≤–æ—â–∞–º–∏.",
            "preparation_time": 5,
            "components": [
                {"title": "–•–ª–µ–±", "quantity": 60},
                {"title": "–°—ã—Ä", "quantity": 40},
                {"title": "–ö–æ–ª–±–∞—Å–∞", "quantity": 50},
                {"title": "–ü–æ–º–∏–¥–æ—Ä", "quantity": 30},
            ],
        },
        {
            "name": "–¢–æ—Å—Ç —Å —Å—ã—Ä–æ–º –∏ —Ç–æ–º–∞—Ç–æ–º",
            "details": "–•—Ä—É—Å—Ç—è—â–∏–π –≥–æ—Ä—è—á–∏–π —Ç–æ—Å—Ç —Å —Ä–∞—Å–ø–ª–∞–≤–ª–µ–Ω–Ω—ã–º —Å—ã—Ä–æ–º –∏ —Å–≤–µ–∂–∏–º–∏ —Ç–æ–º–∞—Ç–∞–º–∏.",
            "preparation_time": 10,
            "components": [
                {"title": "–•–ª–µ–±", "quantity": 60},
                {"title": "–°—ã—Ä", "quantity": 50},
                {"title": "–ü–æ–º–∏–¥–æ—Ä", "quantity": 40},
            ],
        },
    ]

    for dish_data in dishes_data:
        dish, created = Recipe.objects.get_or_create(
            creator=user,
            name=dish_data["name"],
            defaults={
                "details": dish_data["details"],
                "preparation_time": dish_data["preparation_time"],
            },
        )

        if created:
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –±–ª—é–¥–æ: {dish.name}")
        else:
            logging.info(f"–ë–ª—é–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

        for component_info in dish_data["components"]:
            component, _ = Component.objects.get_or_create(
                title=component_info["title"]
            )
            RecipeComponent.objects.get_or_create(
                dish=dish,
                component=component,
                defaults={"quantity": component_info["quantity"]},
            )


# ---- –ì–õ–ê–í–ù–´–ô –í–´–ó–û–í –°–ö–†–ò–ü–¢–ê ----

if __name__ == "__main__":
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã...")
    load_components()
    user = create_users()
    create_dishes(user)
    logging.info("üèÅ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
